#!/usr/bin/env bash
#
# Run 'kubectl' commands on contexts in your kubeconfig

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

usage() {
  local SELF
  SELF="kubectl-allctx"
  if [[ "$(basename "$0")" == kubectl-* ]]; then # invoked as plugin
    SELF="kubectl allctx"
  fi

  cat <<EOF
Usage:
  # get all pods from all contexts
  $ kubectl allctx get pods

  # get all pods that have 'app' in their names from all contexts
  $ kubectl allctx [--like app] get pods 

  # apply configuration to all contexts
  $ kubectl allctx apply -f deployment.yaml
EOF
}

exit_err() {
   echo >&2 "${1}"
   exit 1
}

get_contexts() {
  $KUBECTL config get-contexts -o=name | sort -n
}

main() {
  if hash kubectl 2>/dev/null; then
    KUBECTL=kubectl
  elif hash kubectl.exe 2>/dev/null; then
    KUBECTL=kubectl.exe
  else
    exit_err "kubectl is not installed"
  fi

  if [[ "$#" -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    exit 1
  fi

  ARGS=${@:1}
  NAME=''
  IS_GET=false

  if [[ "${@#get}" != "$@" ]]; then
    IS_GET=true
  fi

  # check '--like' flag
  while [[ $# -gt 0 ]]
  do
    case $1 in
      --like) NAME=$2
        shift;shift ;;
      *)
        shift;;
  esac
  done

  # remove '--like' flag and its value from args
  if [[ -n $NAME ]]; then
    ARGS="${ARGS//--like $NAME}"
  fi

  # reconstruct args
  ARGS=( $(xargs -n 1 <<<"$ARGS") )

  # run provided kubectl command on all contexts
  for context in $(get_contexts)
  do
    tput setaf 1
    echo -e "\nContext: $context"
    tput sgr0
    if [[ "$IS_GET" = true && -n $NAME ]]; then
      $KUBECTL --context=$context ${ARGS[@]} | grep $NAME || [[ $? == 1 ]]
    else
      $KUBECTL --context=$context ${ARGS[@]} || [[ $? == 1 ]]
    fi
  done
}

main "$@"